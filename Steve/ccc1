import os
import tweepy as tw
import pandas as pd
import copy

from textblob import TextBlob
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer 


pd.set_option('display.width', 1000)
pd.set_option('display.max_columns', 500)

pd.options.display.max_colwidth = 1000

consumer_key = "NFOr4aupQcuaV3Fty1FQZnXe5"
consumer_secret = "yE00Xke6dQTjoUKXJnfDs6KslFIL1Gy9yTkVtljWoluOMYTlWK"

access_token = "4088969296-V2x9D5N5zu1NdH0aKQ28ZisofeFeliAE4MsdRn4"
access_token_secret = "68TgonWe92OsmsKQYQ9o4wu3V1VigLRFveWvKbYZtIC2m"

auth = tw.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tw.API(auth, wait_on_rate_limit=True)

search_words = "Samsung"
date_since = "2019-11-16"

# Collect tweets
tweets = tw.Cursor(api.search,
              q=search_words,
              lang="en",
              tweet_mode='extended',
              since=date_since).items(5)
				

tweets1 = copy.deepcopy(tweets)

import pandas as pd

tweet_list = [[tweet.full_text, tweet.user.screen_name, tweet.user.location, tweet.favorite_count] for tweet in tweets]

pd.set_option('display.width', 1000)
pd.set_option('display.max_columns', 500)

pd.options.display.max_colwidth = 1000

tweet_text = pd.DataFrame(data=tweet_list, 
                    columns=["Tweet", "User", "Location", "Favourite count"])
print(tweet_text)

tweet_text.to_excel("Samsung_Tweet_List.xlsx") 


# print(tweets) returns nothing
# print('============')
# for tweet1 in tweets:
	# print(tweet1.full_text)
	# print('--')
# tweet_text = pd.DataFrame(data=users_loc, 
                    # columns=["Tweet", "User", "Location", "Favourite count"])
# print(tweet_text)

# print('---------------------------------------------------------')


def get_AVG(sList):
	p,n,b,maxL = 0,0,0,len(sList)
	for i in sList:
		if i == "Positive":
			p += 1
		elif i == "Neutral":
			n += 1
		else:
			b += 1
	return [int((p/maxL)*100), int((n/maxL) * 100), int((b/maxL) * 100)]

def sentiment_scores(sentence): 
  
#     # Create a SentimentIntensityAnalyzer object. 
    sid_obj = SentimentIntensityAnalyzer() 
  
#     # polarity_scores method of SentimentIntensityAnalyzer 
#     # oject gives a sentiment dictionary. 
#     # which contains pos, neg, neu, and compound scores. 
    sentiment_dict = sid_obj.polarity_scores(sentence) 
#     #print("The tweet is:", sentence)
#     #print("Overall sentiment dictionary is : ", sentiment_dict) 
#     #print("sentence was rated as ", sentiment_dict['neg']*100, "% Negative") 
#     #print("sentence was rated as ", sentiment_dict['neu']*100, "% Neutral") 
#     #print("sentence was rated as ", sentiment_dict['pos']*100, "% Positive") 
  
#     #print("Sentence Overall Rated As", end = " ") 
  
#     # decide sentiment as positive, negative and neutral 
    if sentiment_dict['compound'] >= 0.05 : 

        print("Positive")  		
        return "Positive"
    elif sentiment_dict['compound'] <= - 0.05 :
        print("Negative")
        return "Negative"
    else :
        print("Neutral")
        return "Neutral"
        


reviewL = []
for x, tweet in enumerate(tweets1, 0):
	print('\n statement', x)
	reviewL.append(sentiment_scores(tweet.full_text))
print(reviewL)
print(get_AVG(reviewL))
# users_loc = [[ tweet.user.screen_name, tweet.user.location, tweet.full_text] for tweet in tweets1]

# uloc = []
# for a in range(len(users_loc)):
	# uloc.append(users_loc[a][1])
# print(uloc)
# zipObj = zip(uloc, reviewL)
# gData = dict(zipObj)
# print(gData)
# for h in range(len(users_loc)):
	# users_loc[h].append(reviewL[h])
# 
# tweet_text = pd.DataFrame(data=users_loc, 
                    # columns=["user", "location", "text", "Review"])
# print(tweet_text)
# tweet_text.to_excel("Output2.xlsx") 



# print(sentiment_scores('Today was a good day!'))
# print('\n 2nd statement')
# print(sentiment_scores('I hated today, but tomorrow shall be better!'))
# print('\n 3rd statement')
# print(sentiment_scores('When will i ever get lucky'))
# print('\n last')
# print(sentiment_scores('having to return my @CORSAIR  M65 due to an issue where the left click does not click. Been reading on line and everyone is having this same issue and it appears that instead of recalling the item they just continue to let people buy a faulty product... The K70 however is good'))
# Outputs results to an excel document using pandas

# tweet_text.to_excel("Output1.xlsx") 

# Prints out users name and location -- Location can be precise geolocation, name of State/Country, Blank or just Country.

# --------------------------------------------------------------------------
# This part won't be used as it's already used in before calls
# --------------------------------------------------------------------------
# users_locs = [[tweet.user.screen_name, tweet.user.location] for tweet in tweets]
# print(users_locs)

# tweet_text = pd.DataFrame(data=users_locs, 
#                     columns=['user', "location"])
# print(tweet_text)
# print('--------')
# for tweet1 in tweets:
# 	print(tweet1.text)
# 	print('--')



# print('-------------------------------------')
# # Filter out retweets

# new_search = search_words + " -filter:retweets"
# tweets = tw.Cursor(api.search,
#               q=new_search,
#               lang="en",
#               since=date_since).items(5)

# print([tweet.text for tweet in tweets])
# users_locs = [[tweet.user.screen_name, tweet.user.location] for tweet in tweets]
# print(users_locs)

# tweet_text = pd.DataFrame(data=users_locs, 
#                     columns=['user', "location"])
# print(tweet_text)
